######### PROMPT ##########
# Format "[user directory]$" on local and "[user@host directory]$" on remote node
# Add (branch) in yellow when in a git directory
# Add (@host) in yellow when current directory remotely mounted
# dollar sign in red if last job failed, else green
# directory in blue if jobs are running in the background
# directory on tan(ish?) background if there are stoped jobs
# username in red if root, else yellow
# For remote connections, '@' in green if connection has X11 support


NONE="\[\033[0m\]"
RED="\[\033[0;31m\]"
BLUE="\[\033[0;34m\]"
GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;93m\]"
BGREEN="\[\033[1;32m\]"
BYELLOW="\[\033[1;33m\]"
CYAN="\[\033[0;36m\]"

prompt_command() {
    
    local lastjob=$?

    local ret_color name_color at_color job_color git_branch remote_mount

    { [ $lastjob -ne 0 ] && ret_color=$RED ;} || ret_color=$GREEN
    { [ $UID -eq 0 ] && name_color=$RED ;} || name_color=$YELLOW
    { [ "$DISPLAY" ] && at_color=$BGREEN ;} || at_color=$NONE

	job_color="\[\033[0"
	[ $(jobs -r | wc -l) -ne 0 ] && job_color="$job_color;34"
	[ $(jobs -s | wc -l) -ne 0 ] && job_color="$job_color;01;48;5;101"
	job_color="${job_color}m\]"
	[ "$job_color" == "\[\033[0m\]" ] && job_color=""

    # Git
    if $(git branch &> /dev/null) ; then
        git_repo="$(basename "$(git rev-parse --show-toplevel)")"
        git_branch="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
        git_string="(${git_repo} - ${git_branch})"
    else
        git_string=""
    fi
                                                                     
    remote_mount=$(df . 2> /dev/null | grep @ | sed -e 's/.*@\(.*\):.*/\(@\1\)/')

    PS1="[${name_color}\u${NONE}"
    if [ "$SSH_CLIENT" ] || [ "$PBS_JOBID" ] || [ "$PBS_VERSION" ] ; then
        PS1="${PS1}${at_color}@${NONE}\h"
    fi
    PS1="${PS1} ${job_color}\W${NONE}]"
    PS1="${PS1}${BYELLOW}${remote_mount}${git_string}${ret_color}\$${NONE} "
}
export PROMPT_COMMAND=prompt_command
